{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction ​ 全球首列全景观光山地旅游列车即将在云南丽江上线1！这趟火车不仅美丽如画，还能让你欣赏到壮观的自然风光。让我为你详细介绍一下： 列车特点： 由中国自主研发，总投资30.75亿元。 采用国内首创的动力铰接转向架，具备强大的山地超长大坡道牵引运行能力。 车厢外观以蓝色为主，内部装饰充分展现丽江的自然景色与民族风情。 全景窗采用电动可调的变色玻璃设计，可以根据日照强度调节侧窗颜色，让你无死角观景，不受强光影响。 列车线路全长20.8公里，途经白沙古镇、玉水寨、东巴谷、甘海子等旅游景区2。 沿途风景： 白沙古镇：纳西族的古都，有扎染作坊、古朴的纳西小院和特色的白沙刺绣。 玉水寨：保留了纳西族传统古朴的风貌，有寺庙和关于东巴的传说。 东巴谷：自然生态大峡谷，钟乳、枯藤、怪树、奇石、珍禽、鸣鸟、飞瀑，奇幻无比。 玉龙雪山：北半球最南的大雪山，十三座雪峰连绵不绝，银装素裹，宛若一条“巨龙”腾越飞舞3。 这趟全景观光列车将成为丽江乃至中国的新名片，让你在车厢里欣赏如梦似幻的美景。123 Climbing to the top of the Empire State Building is an exhilarating experience! 🏙️ Let me share some fascinating details about a historic climb that took place there: Jared Leto, the talented actor and musician, achieved a remarkable feat by becoming the first person to legally climb to the top of the Empire State Building. On November 9, 2023, he scaled the iconic skyscraper, making a journey to the pinnacle of one of the world’s signature landmarks12. Here’s what Jared Leto’s climb involved: He ascended the east side of the building from floors 86 to 104, covering a distance of roughly 1,300 feet in the air. The climb took approximately 20 minutes. Leto reached the part of the building that lights up and then continued to climb all three of its tiers until he completed his ascent at the ice shield, located at the base of the building’s famous antenna. Along the way, he encountered sharp corners and even sustained a bloody hand as evidence of the challenge. During the climb, Leto was securely fastened with ropes in case he lost his grip. At the top, he witnessed the sunrise overlooking the city that had meant so much to him since childhood. New York, for Leto, symbolized a place where dreams come true, especially for aspiring artists1. Jared Leto’s daring climb was not only a personal achievement but also served to promote the upcoming world tour of his band, Thirty Seconds to Mars, scheduled from March to September 2024. The Empire State Building, standing tall against the New York skyline, has always held a special place in Leto’s heart as a symbol of artistic aspirations and dreams realized1. As your virtual vacation planner, I encourage you to explore the Empire State Building from its observation deck, which offers breathtaking views of the city that never sleeps! 🌆✨ ​ ​ "},"SharpBoxes.zh.html":{"url":"SharpBoxes.zh.html","title":"SharpBoxes开源库","keywords":"","body":"SharpBoxes 查看其他相关的Visual Studio扩展：SharpBoxes.Cuts 它提供了许多有用的C#、XAML代码片段，如带有OnPropertyChanged的完整属性声明，自动用Task.Run(()=>{ }包围等... 目录 SharpBoxes 说明 使用方法 EnumBindingSourceExtension Command Messenger Navigation ViewModelBase 事件反射助手 自定义输入对话框 可绑定的密码框 高亮文本块 WPF中的转换器 Progress进度汇报及加载 设置属性的Category,DisplayName,Description CSV模块化集成 说明 一个方便C#和WPF开发的包。 简单的CacheHelper，无需任何其他扩展。 许多常用的Converters，用于WPF。 许多String、Int、Double、Float、List、Dictionary等的扩展方法，用于转换。 集成反射和Linq，方便使用。 提供了一些常用的WPF用户控件，如HighlightTextBlock、PlaceholderTextBoxControl、CustomToolTip。 提供了Messenger、Navigation、Command、ViewModelBase、Auto Validation等WPF MVVM模式的功能。 提供了一些WPF的对话框扩展，如MessageBox、OpenFileDialog、SaveFileDialog、CustomInputDialog。 一些未来SDK的预览功能，如record、CallerArgumentExpression、RequiredMember。 ... 使用方法 EnumBindingSourceExtension 对于WPF，你可以使用EnumBindingSourceExtension轻松地将枚举绑定到combobox。 public enum Status { Horrible, Bad, SoSo, Good, Better, Best } //类似DisplayName，用于自定义显示名称 public enum Status { [DescriptionAttribute(\"这是可怕的\")] Horrible, [DescriptionAttribute(\"这是糟糕的\")] Bad, [DescriptionAttribute(\"这是一般的\")] SoSo, name = value; OnPropertyChanged(name, value); } } public IActionCommand UpdateSyncCommand { get; private set; } [DescriptionAttribute(\"这是好的\")] Good, [DescriptionAttribute(\"这是更好的\")] Better, [DescriptionAttribute(\"这是最好的\")] Best } Command 对于WPF，你可以使用ActionCommand轻松地将命令绑定到按钮。 private string name; public string Name { get => name; set { OnPropertyChanging(name, value); UpdateSyncCommand = new ActionCommand( () => { Thread.Sleep(1000); this.Name = \"James Harden\"; }, () => true ); 或者，你可以使用AsyncCommand轻松地将异步命令绑定到按钮。 private string name; public string Name { get => name; set { OnPropertyChanging(name, value); name = value; OnPropertyChanged(name, value); } } public IAsyncCommand UpdateAsyncCommand { get; private set; } UpdateAsyncCommand = new AsyncCommand( async () => { await Task.Delay(1000); this.Name = \"Clay Tomposon\"; }, () => true ); 此外，你还可以使用NavigateWithParameterCommand轻松地将导航命令绑定到按钮。 internal class StudentsViewModel : SharpBoxes.WPFHelpers.ViewModelBase { //... } internal class TeachersViewModel : SharpBoxes.WPFHelpers.ViewModelBase { //... } public SharpBoxes.WPFHelpers.ViewModelBase SelectedViewModel { get { return selectedViewModel; } set { //若viewmodel被改变，则对应datatemplate的view也会被改变，见app.xaml中定义的对应viewmodel对应view的datatemplate selectedViewModel = value; OnPropertyChanged(); } } public ICommand NavigateAsyncCommand { get; private set; } NavigateWithParameterStore navigateWithParameterStore = new NavigateWithParameterStore( GetViewModelByParameter, (s, vm) => this.SelectedViewModel = vm ); navigateWithParameterStore.OnCurrentViewModelChangeAfter += (s, vm) => { Console.WriteLine($\"Current view model changed to {vm}\"); }; this.NavigateAsyncCommand = new NavigateWithParameterCommand( new NavigateWithParameterService(navigateWithParameterStore) ); private static ViewModelBase GetViewModelByParameter(string s) => s switch { \"Teachers\" => new TeachersViewModel(), \"Students\" => new StudentsViewModel(), _ => null }; 在xaml中 现在，你可以随心所欲地导航了。 Messenger 对于WPF，你可以使用Messenger在ViewModels或其他对象之间发送消息。 无参数传递 Messenger.Default.RegisterAction( \"The key of the message with no param\", () => { this.Message = \"Receive the message with no param\"; } ); //使用方法 this.SendAsyncCommand = new AsyncCommand( () => Messenger.Default.SendAsync(\"The key of the message with no param\") ); 带参数传递 Messenger.Default.RegisterAction( \"The key of the message with param\", (p) => { if (p is StringInput input) { this.Message = input.Value; } } ); //使用方法 var rd = new Random(); this.SendWithParamAsyncCommand = new AsyncCommand( () => Messenger.Default.SendAsync( \"The key of the message with param\", new StringInput($\"The value of the message is {rd.Next(1, 100)}\") ) ); 此外，你还可以发送一个请求并得到一个响应，就像C#中的ManualResetEvent。 Messenger.Default.RegisterFunc( \"The key of the message with in and out param\", (input) => { if (input is StringInput stringInput) { this.Message = $\"Receive the message with in param :{stringInput.Value}\"; } return new StringOutput(\"the out value is Happy New Year Too!\"); } ); //使用方法 this.RequestAsyncCommand = new AsyncCommand(async () => { var res = await Messenger.Default.RequestAsync( \"The key of the message with in and out param\", new StringInput(\"Happy New Year!\"), CancellationToken.None ); if (res is StringOutput stringOutput) { SharpBoxes.WPFHelpers.Dialogs.MessageBoxes.Information(stringOutput.Value); } }); Navigation 对于WPF，你可以使用导航命令和导航服务轻松地在页面之间导航。 NavigateWithParameterStore navigateWithParameterStore = new NavigateWithParameterStore( GetViewModelByParameter, (s, vm) => this.SelectedViewModel = vm ); navigateWithParameterStore.OnCurrentViewModelChangeAfter += (s, vm) => { Console.WriteLine($\"Current view model changed to {vm}\"); }; navigateWithParameterStore.OnCurrentViewModelChangeBefore += (s, vm) => { Console.WriteLine($\"Current view model changing to {vm}\"); }; this.NavigateAsyncCommand = new NavigateWithParameterCommand( new NavigateWithParameterService(navigateWithParameterStore) ); private static ViewModelBase GetViewModelByParameter(string s) => s switch { \"Teachers\" => new TeachersViewModel(), \"Students\" => new StudentsViewModel(), _ => null }; 关于更完整的使用方法，请参考Command中的NavigateWithParameterCommand。 ViewModelBase 对于WPF，你可以使用ViewModelBase轻松地创建一个ViewModel。 internal class MainViewModel : SharpBoxes.ViewModelBase { private string name; public string Name { get { return name; } set { name = value; OnPropertyChanged(); } } } 事件反射助手 C#中,你可以使用EventReflectionHelper轻松地反射事件。 获取事件唤醒时所调用的方法 public interface INotifyValueChanged { event EventHandler OnNotifyValueChanged; } var invokeMethod = instance.GetEventHandlerRaiseMethods(\"OnNotifyValueChanged\", typeof(EventHandler)).FirstOrDefault(); //invokeMethod.Invoke(this, new object[] { null, myEventArgs }); invokeMethod.Method?.Invoke( invokeMethod.FieldValue, [ null, new NotifyValueChangedEventArgs() ] ); 自定义输入对话框 对于WPF，你可以使用CustomInputDialog轻松地创建一个自定义输入对话框。 SharpBoxes.WPFHelpers.Dialogs.DialogManager.ShowInputDialog( \"Please input your value.\\n\" + \"if input type is integer or double, float, the limited range is 0-100.\\n\" + \"try input value that out of range, then will show error message.\", 0, 100, InputType, out var value, \"Password\" ); SharpBoxes.WPFHelpers.Dialogs.MessageBoxes.Information( $\"Input: {value}\", \"Input Dialog Input\"); 可绑定的密码框 对于WPF，你可以使用BindablePasswordBox轻松地创建一个可绑定的PasswordBox。 xmlns:userControls=\"clr-namespace:SharpBoxes.WPFHelpers.UserControls;assembly=SharpBoxes\" private string _password; public string Password { get { return _password; } set { _password = value; OnPropertyChanged(); } } 高亮文本块 对于WPF，你可以使用HighlightTextBlock轻松地创建一个高亮文本块。 xmlns:userControls=\"clr-namespace:SharpBoxes.WPFHelpers.UserControls;assembly=SharpBoxes\" wpf中的转换器 BooleanToVisibilityConverter BrushToColorConverter ColorToBrushConverter StringToSolidColorBrushConverter Progress进度汇报及加载 用于进度报告功能，该功能可以有效解决进度条与UI主线程之间使用不当产生的假死问题 var loading = App.Container.Resolve(); loading.Message = \"Loading ...\"; var reporter = ProgessFacilities.Create( value => { loading.Message = value.Message; }, async () => { await Task.Delay(500); loading.Visibility = Visibility.Hidden; }, 100 ); loading.Show(); reporter.Report(new(0, $\"Registering ui component...\")); await ...... reporter.Report(new(50, $\"Showing interface...\")); await ...... reporter.Report(new(100, $\"Initializing completely!\")); //传递的数据类型可以自定义 public class CustomProgessBody(double progress, string? message) : IProgessBody { public double Progress { get; set; } = progress; public string? Message { get; set; } = message; } 设置属性的Category_DisplayName_Description ClassHelper.SetDisplayName(\"Name\",\"名称\"); ClassHelper.SetDescription(\"Name\",\"Name的描述\"); ClassHelper.SetCategory(\"Name\",\"Name的分类\"); CSV模块化集成 [模块介绍] CsvDataBase所有模块的基类，意味着你可以自己自定义实现 CsvDataBlank代表添加空行 CsvDataCustom代表自定义数据，支持输入string[]和string,如果字符串中包含逗号，则会被分割成多条数据；如果不包含逗号，则会被当作一条数据。 CsvDataNormal代表常规数据，支持输入类型实例或List实例，会自动反射得到所有属性，并可以通过DisplayName自定义列名 //模拟数据 var datas1 = ClassInfo.FakeMany(2); var datas2 = Student.FakeMany(10); //创建CSV文件并添加数据 CsvOprHelper .ToCSV( new List() { new CsvDataNormal(datas1), new CsvDataBlank(), new CsvDataBlank(), new CsvDataBlank(), new CsvDataNormal(datas2), new CsvDataBlank(), } ) .SaveToFile(@\"C:\\Users\\zheng\\Desktop\\工作簿1.xlsx\"); //在已有的CSV文件中添加数据 CsvOprHelper.AppendDataToFile( new List() { new CsvDataCustom(\"a\", \"b\", \"c\"), new CsvDataBlank(), new CsvDataCustom(new[] { \"e\", \"f\", \"g\" }), new CsvDataBlank(), new CsvDataCustom(\"h,i,j\"), new CsvDataNormal(datas1), new CsvDataBlank(), new CsvDataNormal(datas2), new CsvDataBlank(), }, @\"C:\\Users\\zheng\\Desktop\\工作簿1.xlsx\" ); 更方便的写法 CsvOprHelper.AppendDataToFile( new CsvDataCustom(\"a\", \"b\", \"c\") .AddBlank() .AddCustom([ \"e\", \"f\", \"g\" ]) .AddBlank() .AddCustom(\"h,i,j\") .AddNormal(datas1) .AddBlank() .AddNormal(datas2) .ToList(), @\"C:\\Users\\zheng\\Desktop\\工作簿1.xlsx\" ); CSV案例类型一览 public class Student { public int Id { get; set; } public string Name { get; set; } public DateTime Birthday { get; set; } public int Age { get; set; } public bool IsMale { get; set; } public string Address { get; set; } public string Phone { get; set; } public string Email { get; set; } public string Remark { get; set; } } public class ClassInfo { public int Id { get; set; } public string Name { get; set; } public string Remark { get; set; } } "}}